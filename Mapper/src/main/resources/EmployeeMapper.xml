<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace写接口的全类名-->
<mapper namespace="me.rsnomis.dao.EmployeeMapper">
    <select id="selectEmp" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select id,last_name lastName, email, gender from tbl_employee where id = #{id}
    </select>

    <select id="getEmpById" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select id,last_name lastName, email, gender from tbl_employee where id = #{id}
    </select>

    <!--多个参数-->
    <select id="getEmpByIdAndLastName" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select id,last_name lastName, email, gender from tbl_employee where id = #{param1} and last_name=#{param2}
    </select>

    <!--传入map-->
    <select id="getEmpByMap" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select id,last_name lastName, email, gender from tbl_employee where id = #{id} and last_name=#{lastName}
    </select>

    <!--返回list对象
        返回类型为集合，那么resultType要写集合中元素的类型
    -->
    <select id="getEmpByLastName" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--返回一个map,封装单条记录
        返回类型直接写map，因为mybatis已经内部取了别名
    -->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <!--返回一个map，封装多条记录
        返回类型直接写map，因为mybatis已经内部取了别名
    -->
    <select id="getEmpByLastNameReturnMap" resultType="me.rsnomis.me.rsnomis.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--mybatis支持自增主键值的获取，利用statement.getGeneratedKeys()
    设置useGeneratedKeys为true 使用获取主键值的策略
    指定对应的主键属性，即获取主键值后封装到对象的什么属性上
    -->
    <insert id="addEmp" parameterType="me.rsnomis.me.rsnomis.bean.Employee"
        useGeneratedKeys="true" keyProperty="id" databaseId="MySQL">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName}, #{email}, #{gender})
    </insert>

    <!--Oracle中的插入，主键是从序列中拿到的
        可以在selectKey标签中先定义查找id的语句
    -->
    <insert id="addEmp" parameterType="me.rsnomis.me.rsnomis.bean.Employee"
            databaseId="Oracle">
        <!--keyProperty：属性值封装给那个bean属性
            order: BEFORE 因为是在插入之前先查询主键值，所以设定执行顺序为之前执行
                   AFTER 见下面AFTER的语句，即先运行插入，然后插入执行完后再获取id
            resultType: 说明封装的字段类型
        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!--编写主键查询sql语句，是在插入之前运行的-->
            select EMPLOYEE_SEQ.nextval from dual

            <!--使用after时，先执行了插入语句，可以使用以下语句获取id值
            mysql也可以使用这种方式，直接select id
            AFTER的方式在同时插入多条数据的时候可能取到相同值，一般用BEFORE
            select EMPLOYEE_SEQ.currval from dual
            -->
        </selectKey>
        <!--插入从序列中拿到的id，变量名即keyProperty中定义的-->
        insert into tbl_employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id}, #{lastName}, #{email}, #{gender})

        <!--如果order使用AFTER，则先执行如下语句，此时id序列号是直接在插入语句的同时获取的，插入完成后再获取id值
        insert into tbl_employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(EMPLOYEE_SEQ.nextval, #{lastName}, #{email}, #{gender})-->
    </insert>

    <!--传入参数为map-->
    <insert id="insertEmpByPojo" parameterType="me.rsnomis.me.rsnomis.bean.Employee">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName}, #{email}, #{gender})
    </insert>

    <update id="updateEmp" parameterType="me.rsnomis.me.rsnomis.bean.Employee">
        update tbl_employee
            set last_name=#{lastName}, email=#{email}, gender=#{gender}
            where id=#{id}
    </update>
    
    <delete id="deleteEmpById" parameterType="me.rsnomis.me.rsnomis.bean.Employee">
        delete from tbl_employee where id=#{id}
    </delete>

</mapper>